import dotenv from "dotenv";
import { App, Octokit } from "octokit";
import { createNodeMiddleware } from "@octokit/webhooks";
import fs from "fs";
import http from "http";
import { WebhookEvent } from "@octokit/webhooks-types";

const SmeeClient = require('smee-client')

const smee = new SmeeClient({
    source: 'https://smee.io/H7LD3luuaCa1KGP',
    target: 'http://localhost:3001/api/webhook',
    logger: console
})


const events = smee.start()

dotenv.config();


const appId = process.env.APP_ID;
const webhookSecret = process.env.WEBHOOK_SECRET;
const privateKeyPath = process.env.PRIVATE_KEY_PATH;

if (!appId || !webhookSecret || !privateKeyPath) {
    console.error("Missing required environment variables. Please check your .env file.");
    process.exit(1);
}
else {
    console.log("Environment variables loaded successfully.");
    console.log(`App ID: ${appId}`);
    console.log(`Webhook Secret: ${webhookSecret}`);
    console.log(`Private Key Path: ${privateKeyPath}`);

}

const privateKey = fs.readFileSync(privateKeyPath, "utf8");

const app = new App({
    appId: appId,
    privateKey: privateKey,
    webhooks: {
        secret: webhookSecret
    },
    });


const messageForNewPRs = "Thanks for opening a new PR! Please follow our contributing guidelines to make your PR easier to review.";


async function handlePullRequestOpened({ octokit, payload }: { octokit: Octokit, payload: any }) {
    console.log(`Received a pull request event for #${payload.pull_request.number}`);

    try {
        await octokit.request(`POST /repos/{owner}/{repo}/issues/{issue_number}/comments`, {
            owner: payload.repository.owner.login,
            repo: payload.repository.name,
            issue_number: payload.pull_request.number,
            body: messageForNewPRs,
            headers: {
                "x-github-api-version": "2022-11-28",
            },
        });
    } catch (error: any) {
        if (error.response) {
            console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)
        }
        console.error(error)
    }
};

// async function handleIssueOpened({ octokit, payload }: { octokit: Octokit, payload: any }) {
//     await octokit.request("POST /repos/{owner}/{repo}/issues/{issue_number}/comments", {
//         owner: payload.repository.owner.login,
//         repo: payload.repository.name,
//         issue_number: payload.issue.number,
//         body: `This is a bot post in response to this issue being opened.`,
//         headers: {
//             "x-github-api-version": "2022-11-28",
//         },
//     }
//     )
// }

// app.webhooks.on("issues.opened", handleIssueOpened);



app.webhooks.onError((error: any) => {
    if (error.name === "AggregateError") {
        console.error(`Error processing request: ${error.event}`);
    } else {
        console.error(error);
    }
});



const port = 3001;
const host = 'localhost';
const path = "/api/webhook";
const localWebhookUrl = `http://${host}:${port}${path}`;

const middleware = createNodeMiddleware(app.webhooks, { path });


http.createServer(middleware).listen(port, () => {
    console.log(`Server is listening for events at: ${localWebhookUrl}`);
    console.log('Press Ctrl + C to quit.')
});


